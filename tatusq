[1mdiff --git a/aws_iot_library/MQTTClient.cpp b/aws_iot_library/MQTTClient.cpp[m
[1mindex c5a6c7b..66adc59 100644[m
[1m--- a/aws_iot_library/MQTTClient.cpp[m
[1m+++ b/aws_iot_library/MQTTClient.cpp[m
[36m@@ -47,7 +47,7 @@[m [mint sendPacket(Client* c, int length, Timer* timer)[m
     }[m
     if (sent == length)[m
     {[m
[31m-        //countdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet[m
[32m+[m[32m        countdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet[m
         rc = SUCCESS;[m
     }[m
     else[m
[36m@@ -293,7 +293,7 @@[m [mint cycle(Client* c, Timer* timer)[m
             else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)[m
                 rc = FAILURE;[m
             else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet[m
[31m-                rc = FAILURE; // there was a problem[m
[32m+[m[32m                rc = FAILURE; // there was a problem,[m
             if (rc == FAILURE)[m
                 goto exit; // there was a problem[m
             break;[m
[36m@@ -504,18 +504,24 @@[m [mint MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)[m
     InitTimer(&timer);[m
     countdown_ms(&timer, c->command_timeout_ms);[m
     [m
[31m-    if (!c->isconnected)[m
[32m+[m[32m    if (!c->isconnected){[m
[32m+[m[32m        Serial.println("MQTTPublish error 111");[m
         goto exit;[m
[32m+[m[32m    }[m
 [m
     if (message->qos == QOS1 || message->qos == QOS2)[m
         message->id = getNextPacketId(c);[m
     [m
     len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, [m
               topic, (unsigned char*)message->payload, message->payloadlen);[m
[31m-    if (len <= 0)[m
[32m+[m[32m    if (len <= 0) {[m
[32m+[m[32m        Serial.println("MQTTPublish error 222");[m
         goto exit;[m
[31m-    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet[m
[32m+[m[32m    }[m
[32m+[m[32m    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) {// send the subscribe packet[m
[32m+[m[32m        Serial.println("MQTTPublish error 333");[m
         goto exit; // there was a problem[m
[32m+[m[32m    }[m
     [m
     if (message->qos == QOS1)[m
     {[m
[36m@@ -523,11 +529,15 @@[m [mint MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)[m
         {[m
             unsigned short mypacketid;[m
             unsigned char dup, type;[m
[31m-            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)[m
[32m+[m[32m            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1) {[m
[32m+[m[32m                Serial.println("MQTTPublish error 444");[m
                 rc = FAILURE;[m
[32m+[m[32m            }[m
         }[m
[31m-        else[m
[32m+[m[32m        else {[m
[32m+[m[32m            Serial.println("MQTTPublish error 444");[m
             rc = FAILURE;[m
[32m+[m[32m        }[m
     }[m
     else if (message->qos == QOS2)[m
     {[m
[36m@@ -535,11 +545,15 @@[m [mint MQTTPublish(Client* c, const char* topicName, MQTTMessage* message)[m
         {[m
             unsigned short mypacketid;[m
             unsigned char dup, type;[m
[31m-            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)[m
[32m+[m[32m            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1) {[m
[32m+[m[32m                Serial.println("MQTTPublish error 555");[m
                 rc = FAILURE;[m
[32m+[m[32m            }[m
         }[m
[31m-        else[m
[32m+[m[32m        else {[m
[32m+[m[32m            Serial.println("MQTTPublish error 111");[m
             rc = FAILURE;[m
[32m+[m[32m        }[m
     }[m
     [m
 exit:[m
[1mdiff --git a/examples/aws_paho_mqtt/aws_paho_mqtt.ino b/examples/aws_paho_mqtt/aws_paho_mqtt.ino[m
[1mindex aba99e6..0710e4d 100644[m
[1m--- a/examples/aws_paho_mqtt/aws_paho_mqtt.ino[m
[1m+++ b/examples/aws_paho_mqtt/aws_paho_mqtt.ino[m
[36m@@ -55,11 +55,11 @@[m [mchar clientKeyName[] = AWS_IOT_PRIVATE_KEY_FILENAME;[m
 [m
 LWiFiClient c;[m
 bool infinitePublishFlag;[m
[31m-char cPayload[100];[m
[32m+[m[32m//char cPayload[100];[m
 int32_t i;[m
 int rc;[m
 QoSLevel qos = QOS_0;[m
[31m-char mqtt_message[2048];[m
[32m+[m[32mchar mqtt_message[30];[m
 bool doingSetup = true;[m
 [m
 int32_t MQTTcallbackHandler(MQTTCallbackParams params) {[m
[36m@@ -77,7 +77,7 @@[m [mint32_t MQTTcallbackHandler(MQTTCallbackParams params) {[m
 }[m
 [m
 void disconnectCallbackHandler(void) {[m
[31m-	Serial.println("MQTT Disconnect");[m
[32m+[m[32m  Serial.println("MQTT Disconnect");[m
         Serial.flush();[m
 }[m
 [m
[36m@@ -131,9 +131,9 @@[m [mboolean  mqtt_start(void* ctx)[m
               connectParams.pDeviceCertLocation = clientCRTName;[m
               connectParams.pDevicePrivateKeyLocation = clientKeyName;[m
               connectParams.mqttCommandTimeout_ms = 2000;[m
[31m-	      connectParams.tlsHandshakeTimeout_ms = 5000;[m
[31m-	      connectParams.isSSLHostnameVerify = true;// ensure this is set to true for production[m
[31m-	      connectParams.disconnectHandler = disconnectCallbackHandler;[m
[32m+[m[32m        connectParams.tlsHandshakeTimeout_ms = 5000;[m
[32m+[m[32m        connectParams.isSSLHostnameVerify = true;// ensure this is set to true for production[m
[32m+[m[32m        connectParams.disconnectHandler = disconnectCallbackHandler;[m
   [m
               rc = aws_iot_mqtt_connect(&connectParams);[m
               if (NONE_ERROR != rc) {[m
[36m@@ -177,7 +177,7 @@[m [mboolean wifiResolveDomainName(void *userData)[m
   IN_ADDR addr;[m
   [m
 //  Serial.print("in wifiResolveDomainName, host name is ");[m
[31m-//	Serial.println(domainName);[m
[32m+[m[32m//  Serial.println(domainName);[m
 [m
   VMINT resolveState;[m
   if (WIFI_USED){[m
[36m@@ -266,10 +266,10 @@[m [mvoid setup()[m
 You may need to call it in loop function and then pass the parameter to nativeLoop through a pointer. */[m
 void loop()[m
 {[m
[31m-    int aa[1];[m
[31m-    aa[0] =analogRead(A0);[m
[32m+[m[32m//    int aa[1];[m
[32m+[m[32m//    aa[0] =analogRead(A0);[m
     Serial.flush();[m
[31m-    LTask.remoteCall(nativeLoop, (void*)aa);  //pass analogRead(A0) value to nativeLoop, in that analogRead could not be called in remoteCall, otherwise it will cause a crash.[m
[32m+[m[32m    LTask.remoteCall(nativeLoop, NULL);  //pass analogRead(A0) value to nativeLoop, in that analogRead could not be called in remoteCall, otherwise it will cause a crash.[m
     delay(2000);[m
 }[m
 [m
[36m@@ -314,7 +314,7 @@[m [mint publish_MQTT(char * topic, char * message) {[m
 [m
   rc = aws_iot_mqtt_yield(1000); //please don't try to put it lower than 1000, otherwise it may going to timeout easily and no response  [m
   Serial.println("-->sleep");[m
[31m-  delay(1000);[m
[32m+[m[32m//  delay(1000);[m
 [m
   // Publish[m
   Serial.print("Publishing...");[m
[36m@@ -334,10 +334,10 @@[m [mint publish_MQTT(char * topic, char * message) {[m
 /* natvieLoop which will use to do your main job in the loop */[m
 boolean nativeLoop(void* user_data) {[m
     [m
[31m-    int *bb = (int*)user_data;[m
[32m+[m[32m//    int *bb = (int*)user_data;[m
     sprintf(mqtt_message, "%s : and read valie is %d ", "hello from SDK", i++);[m
     [m
     Serial.println("publish_MQTT go");[m
     rc = publish_MQTT("mtktestTopic5", mqtt_message);[m
     Serial.flush();[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/~$README.md b/~$README.md[m
[1mdeleted file mode 100644[m
[1mindex c27157c..0000000[m
Binary files a/~$README.md and /dev/null differ
